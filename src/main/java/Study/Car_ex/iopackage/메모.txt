    //출력 데이터는 일반적으로 문자열을 사용함.
    //바이너리 데이터 : 이미지, 오디오, 비디오, 실행 파일.
    // 데부분의 데이터 : 눈으로 판독이 가능한 텍스트로 구성.

    // 자바 : 자바 언어는 영미권에서 만들어졌기 때문에 영어로 입출력하는 경우에는 문제가 없음.
    // But, 다른 문자를 사용하는 나라에서 자국의 언어로 입출력하면 문제가 발생할 수 있음.
    // 각 나라의 언어를 표현하는 인코딩이 다르기 때문에 문제가 발생함.

    // ASCII 코드는 7비트 로 필요한 모든 영문자와 숫자 등을 표현함.
    // +1 비트 = 8비트로 1로 설정된 부분에 특수한 형태의 문자를 추가하여 표현함.
    // Extended ASCII : 128~255의 빈 공간을 사용함. 우리나라의 한글을 표현 할 때도 이 공간을 사용.
    // 초성 : 기본 14 겹자 5 (5비트), 중성 : 기본 10 복모음 11 (5비트), 종성 : 기본 14 겹자 2 복자 11 받침 없음 1 (5비트)
    // 15비트는 있어야 하나의 한글 표현이 가능.
    // 한글의 한 글자는 Extended ASCII를 사용하여 빈 공간을 쓰면 표현할 수 있지만, 1바이트로 표현할 수 없음.
    // 2바이트를 묶어서 한 글자를 표현함. --> Multi Byte Character Set

    //2바이트 중 영문 -> 첫 비트가 0인 경우, 1바이트를 읽어서 영문으로 해석.
    //2바이트 중 한글 -> 첫 비트가 1인 경우, 2바이트를 읽어서 첫 비트를 떼어냄. 5비트씩 나누어 초성, 중성, 종성으로 대응하여 한글로 인식.
    // 요런 인코딩 방식 : KSC5601, EUC-KR, MS949(Window OS)


    //각 나라별로 자신만의 고유한 언어를 표현하기 위해서 Extended ASCII를 사용함.
    // 전 세계의 데이터가 서로 다르게 해석되는 문제가 발생하였고, 국제 표준화 기구에서 표준 인코딩을 제안함.
    // IOS(국제 표준화 기구) 에서 유니코드(Unicode) 채택. 2바이트는 65536개의 공간을 가지고, 각 나라별로 자신의 언어가 속하고 있는 고유한 공간을 배정 받음.
    // 한글 : 0XAC00 에서 시작함. 19 * 21 * 28 = 11,172자 만큼의 공간을 차지함. 사전의 순서에 입각하여 모든 글자가 차례로 나열됨.
    // 자바는 유니코드를 지원할 수 있도록 내부적으로 사용하는 글자의 크기를 2바이트로 지정함.
Unicode를 사용하여 표현하는 한글
ASCII를 사용하여 표현하는 한글  은 바이트 데이터가 서로 다름.

가 -> unicode : 0xAC00 , ASCII : 0xB0A1
같은 한글이라 할지라도 어떤 인코딩을 적용했느냐에 따라 전혀 다르게 해석되고 조합됨.

UTF-8 은 가변 길이를 지원하는데 각 언어별로 최적화된 크기로 저장할 수 있또록 1 바이트에서 3바이트까지 표현이 달라짐.
영문 1 바이트, 한글 3 바이트.
즉, 바이트 데이터의 값과 그 값이 해석

자바에서 인코딩이 적용 되는 부분은? = > 바이트 데이터를 기준으로 문자를 만들어 내는 부분.
char 와 String 클래스 // 바이트 스트림에서 문자 스트림으로 변환되는 클래스.

String 클래스의 생성자를 보면 바이트 배열을 어떤 인코딩으로 해석하여 문자를 생성할 것인지 지정하는 생성자가 존재함.
기존의 String 객체를 어떤 인코딩을 통하여 바이트 배열로 분해할 것인지를 지정해서 실행하는 getBytes()메서드도 존재함.
? 자바에서 글자가 깨지는 현상이 발생한다면? -> 깨진 글자를 getBytes()로 분해했다가 새롭게 String 객체를 만들어 출력하는 방법으로 해결.
